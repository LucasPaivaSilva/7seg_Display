
Display7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f6  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000212  00000000  00000000  00000f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007e  00000000  00000000  000014d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

int main(void)
{
	int x = 0;
	int y = 0;
	DDRB  = 0xFF;	//Conigura como saida
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	DDRD  = 0xFF;	//Conigura como saida
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRC  = 0x00;	//Conigura como entrada
  9c:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;	//Habilita o pull up do port B
  9e:	88 b9       	out	0x08, r24	; 8
  a0:	60 e1       	ldi	r22, 0x10	; 16
  a2:	71 e0       	ldi	r23, 0x01	; 1
  a4:	a0 e1       	ldi	r26, 0x10	; 16
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	51 e0       	ldi	r21, 0x01	; 1
	
	while(1)
	{
		for (x=0;x<4;x++)
		{
			PORTD = ScanBytes[x]; // Mudo o estado da saida do port para valor em scanbytes
  ac:	8d 91       	ld	r24, X+
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	fa 01       	movw	r30, r20
			for (y=0;y<4;y++)
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
			{
				if (tst_bit(PINC, y)==0)
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 2e       	mov	r0, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x2c>
  be:	95 95       	asr	r25
  c0:	87 95       	ror	r24
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <main+0x28>
  c6:	80 fd       	sbrc	r24, 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x38>
				{
					PORTB = PadDigits[x][y];
  ca:	80 81       	ld	r24, Z
  cc:	85 b9       	out	0x05, r24	; 5
	while(1)
	{
		for (x=0;x<4;x++)
		{
			PORTD = ScanBytes[x]; // Mudo o estado da saida do port para valor em scanbytes
			for (y=0;y<4;y++)
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	31 96       	adiw	r30, 0x01	; 1
  d4:	24 30       	cpi	r18, 0x04	; 4
  d6:	31 05       	cpc	r19, r1
  d8:	71 f7       	brne	.-36     	; 0xb6 <main+0x20>
  da:	4c 5f       	subi	r20, 0xFC	; 252
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
	PORTC = 0xFF;	//Habilita o pull up do port B
	
	
	while(1)
	{
		for (x=0;x<4;x++)
  de:	46 17       	cp	r20, r22
  e0:	57 07       	cpc	r21, r23
  e2:	21 f7       	brne	.-56     	; 0xac <main+0x16>
  e4:	df cf       	rjmp	.-66     	; 0xa4 <main+0xe>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
