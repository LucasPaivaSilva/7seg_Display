
Display7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000069c  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000609  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000250  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000334  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int x = 0;
int y = 0;

int main(void)
{
	DDRD  = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
  94:	8b b9       	out	0x0b, r24	; 11
	DDRC  = 0xFF;
  96:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xFF;
  98:	88 b9       	out	0x08, r24	; 8
	DDRB  = 0x00;
  9a:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;
  9c:	85 b9       	out	0x05, r24	; 5
    while(1)
    {
			for(x = 1; x < 5; x++){
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
			PORTC |= 0xF;
			y = x;
			CLR_BIT(PORTC, y);
			if (TST_BIT(PINB, PB0)==0){
			PORTD = 0x79;}
  a2:	e9 e7       	ldi	r30, 0x79	; 121
			if (TST_BIT(PINB, PB1)==0){
			PORTD = 0x24;}
  a4:	74 e2       	ldi	r23, 0x24	; 36
			if (TST_BIT(PINB, PB2)==0){
			PORTD = 0x30;}
  a6:	60 e3       	ldi	r22, 0x30	; 48
	PORTC = 0xFF;
	DDRB  = 0x00;
	PORTB = 0xFF;
    while(1)
    {
			for(x = 1; x < 5; x++){
  a8:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <x+0x1>
  ac:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <x>
			PORTC |= 0xF;
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	88 b9       	out	0x08, r24	; 8
			y = x;
  b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x>
  ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x+0x1>
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
			CLR_BIT(PORTC, y);
  c6:	98 b1       	in	r25, 0x08	; 8
  c8:	9a 01       	movw	r18, r20
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <main+0x40>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	8a 95       	dec	r24
  d2:	e2 f7       	brpl	.-8      	; 0xcc <main+0x3c>
  d4:	82 2f       	mov	r24, r18
  d6:	80 95       	com	r24
  d8:	89 23       	and	r24, r25
  da:	88 b9       	out	0x08, r24	; 8
			if (TST_BIT(PINB, PB0)==0){
  dc:	18 9b       	sbis	0x03, 0	; 3
			PORTD = 0x79;}
  de:	eb b9       	out	0x0b, r30	; 11
			if (TST_BIT(PINB, PB1)==0){
  e0:	19 9b       	sbis	0x03, 1	; 3
			PORTD = 0x24;}
  e2:	7b b9       	out	0x0b, r23	; 11
			if (TST_BIT(PINB, PB2)==0){
  e4:	1a 9b       	sbis	0x03, 2	; 3
			PORTD = 0x30;}
  e6:	6b b9       	out	0x0b, r22	; 11
	PORTC = 0xFF;
	DDRB  = 0x00;
	PORTB = 0xFF;
    while(1)
    {
			for(x = 1; x < 5; x++){
  e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x>
  ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x+0x1>
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x+0x1>
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x>
  fa:	05 97       	sbiw	r24, 0x05	; 5
  fc:	cc f2       	brlt	.-78     	; 0xb0 <main+0x20>
  fe:	d4 cf       	rjmp	.-88     	; 0xa8 <main+0x18>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
